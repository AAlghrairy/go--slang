/**
 * Definition of the core nodes for processed C AST. Most of the nodes are the same as those from the unprocessed
 * AST generated by the parser.
 *
 * Processed node names follow the same naming as their original C AST counterpart, with "P" suffix to indicate that they are the processed version.
 */

import { ScalarCDataType } from "~src/common/types";
import { ConstantP } from "~src/processor/c-ast/constants";
import {
  BinaryExpressionP,
  PostStatementExpressionP,
  PreStatementExpressionP,
  UnaryExpressionP,
} from "~src/processor/c-ast/expressions";
import {
  FunctionCallP,
  FunctionDefinitionP,
  ReturnStatementP,
} from "~src/processor/c-ast/function";
import { IterationStatementP } from "~src/processor/c-ast/loops";
import {
  MemoryAddressExpressionLoad,
  MemoryLoad,
  MemoryStore,
  ObjectMemoryAddress,
} from "~src/processor/c-ast/memory";
import { SelectionStatementP } from "~src/processor/c-ast/selection";

export type CNodeP = FunctionDefinitionP | StatementP | ExpressionP;

/**
 * Every processed C AST node should extend this interface.
 */
export interface CNodePBase {
  type: string;
}

export type StatementP =
  | MemoryStore
  | SelectionStatementP
  | IterationStatementP
  | FunctionCallP
  | ReturnStatementP;

// An expression results in the "loading" of a primary data type from memory (could be to a virtual stack as in Wasm, or register in other architectures)
export type ExpressionP =
  | MemoryLoad
  | BinaryExpressionP
  | ConstantP
  | PreStatementExpressionP
  | PostStatementExpressionP
  | UnaryExpressionP
  | ObjectMemoryAddress
  | MemoryAddressExpressionLoad;

/**
 * All expressions should inherit this, as all expressions should have a data type.
 */
export interface ExpressionPBase extends CNodePBase {
  dataType: ScalarCDataType;
}

export interface CAstRootP extends CNodePBase {
  type: "Root";
  functions: FunctionDefinitionP[];
  statements: StatementP[];
}
