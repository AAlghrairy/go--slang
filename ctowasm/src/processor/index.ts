/**
 * C AST Processor Module.
 */

import { CAstRoot } from "~src/parser/c-ast/core";
import { FunctionDataType } from "~src/parser/c-ast/dataTypes";
import { CAstRootP } from "~src/processor/c-ast/core";
import processFunctionDefinition from "~src/processor/processFunctionDefinition";
import { processDataSegmentVariableDeclaration } from "~src/processor/processDeclaration";
import { SymbolTable } from "~src/processor/symbolTable";

/**
 * Processes the C AST tree generated by parsing, to add additional needed information for certain nodes.
 * @param ast
 * @param sourceCode
 * @returns
 */
export default function process(
  ast: CAstRoot,
  externalFunctions?: Record<string, FunctionDataType>,
) {
  const symbolTable = new SymbolTable();
  const processedExternalFunctions = symbolTable.setExternalFunctions(
    externalFunctions ?? {},
  );
  const processedAst: CAstRootP = {
    type: "Root",
    functions: [],
    dataSegmentByteStr: "",
    dataSegmentSizeInBytes: 0,
    externalFunctions: {},
  };

  // save the processed details of external functions
  for (const externalFuncName in processedExternalFunctions) {
    processedAst.externalFunctions[externalFuncName] = {
      name: externalFuncName,
      parameters:
        processedExternalFunctions[externalFuncName].processedFunctionDetails
          .parameters,
      returnObjects:
        processedExternalFunctions[externalFuncName].processedFunctionDetails
          .returnObjects,
    };
  }

  ast.children.forEach((child) => {
    // special handling for function definitions
    if (child.type === "FunctionDefinition") {
      processedAst.functions.push(
        processFunctionDefinition(child, symbolTable),
      );
    } else {
      processedAst.dataSegmentByteStr += processDataSegmentVariableDeclaration(
        child,
        symbolTable,
      ); // add the byte str used to initalize this variable to teh data segment byte string
    }
  });
  processedAst.dataSegmentSizeInBytes =
    processedAst.dataSegmentByteStr.length / 3; // since each byte is written as "\\XX"
  return processedAst;
}
