/**
 * Types that are common to any generated parser.
 */
export declare const COMMON_TYPES_STR = "\nexport interface FilePosition {\n  offset: number;\n  line: number;\n  column: number;\n}\n\nexport interface FileRange {\n  start: FilePosition;\n  end: FilePosition;\n  source: string;\n}\n\nexport interface LiteralExpectation {\n  type: \"literal\";\n  text: string;\n  ignoreCase: boolean;\n}\n\nexport interface ClassParts extends Array<string | ClassParts> {}\n\nexport interface ClassExpectation {\n  type: \"class\";\n  parts: ClassParts;\n  inverted: boolean;\n  ignoreCase: boolean;\n}\n\nexport interface AnyExpectation {\n  type: \"any\";\n}\n\nexport interface EndExpectation {\n  type: \"end\";\n}\n\nexport interface OtherExpectation {\n  type: \"other\";\n  description: string;\n}\n\nexport type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;\n\ndeclare class _PeggySyntaxError extends Error {\n  public static buildMessage(expected: Expectation[], found: string | null): string;\n  public message: string;\n  public expected: Expectation[];\n  public found: string | null;\n  public location: FileRange;\n  public name: string;\n  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);\n  format(sources: {\n    source?: any;\n    text: string;\n  }[]): string;\n}\n\nexport interface TraceEvent {\n    type: string;\n    rule: string;\n    result?: any;\n    location: FileRange;\n  }\n\ndeclare class _DefaultTracer {\n  private indentLevel: number;\n  public trace(event: TraceEvent): void;\n}\n\n";
