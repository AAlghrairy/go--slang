#!/usr/bin/env node
"use strict";
const fs = require("node:fs");
const process = require("node:process");
const peggy = require("peggy");
const tspegjs = require("./tspegjs.js");
require("ts-morph");
require("prettier/parser-typescript");
require("prettier/standalone");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs);
const process__namespace = /* @__PURE__ */ _interopNamespaceDefault(process);
const version = "4.2.1";
const generate = peggy.generate;
let args = process__namespace.argv;
args.shift();
args.shift();
const needHelp = args.find((a) => a === "-h");
if (args.length === 0 || needHelp) {
  showHelp();
  process__namespace.exit(0);
}
const inFile = args[args.length - 1];
let outFile = inFile.replace(".pegjs", ".ts");
args.forEach((arg, index) => {
  if (arg === "-o") {
    outFile = args[index + 1];
  }
});
let allowedStartRules = null;
let customHeaderFile = null;
let customHeader = null;
args.forEach((arg, index) => {
  if (arg === "--allowed-start-rules") {
    allowedStartRules = (args[index + 1] || "").split(",");
  }
  if (arg === "--custom-header") {
    customHeader = args[index + 1];
  }
  if (arg === "--custom-header-file") {
    customHeaderFile = args[index + 1];
  }
});
const trace = args.find((a) => a === "--trace") ? true : false;
const cache = args.find((a) => a === "--cache") ? true : false;
function showHelp() {
  console.log("tspegjs v." + version + "      TS target for pegjs");
  console.log("Usage:");
  console.log(
    "  tspegjs [-o outFile.ts] [--allowed-start-rules <rule1,rule2>] [--trace] [--cache] [--no-tslint] [--tslint-ignores <rule1,rule2>] [--custom-header <header>] [--custom-header-file <headerFile>] <inGrammar.pegjs>"
  );
}
function generateParser(input_file, output_file, trace2, cache2, allowedStartRules2, customHeader2, customHeaderFile2) {
  fs__namespace.readFile(input_file, function(err, data) {
    if (err)
      throw err;
    if (customHeaderFile2 && !customHeader2) {
      customHeader2 = fs__namespace.readFileSync(customHeaderFile2).toString();
    }
    const opts = {
      output: "source",
      trace: trace2,
      cache: cache2,
      plugins: [tspegjs],
      tspegjs: {
        customHeader: customHeader2
      }
    };
    if (allowedStartRules2) {
      opts.allowedStartRules = allowedStartRules2;
    }
    let parser = generate(data.toString(), opts);
    fs__namespace.writeFileSync(output_file, parser.toString());
  });
}
generateParser(inFile, outFile, trace, cache, allowedStartRules, customHeader, customHeaderFile);
